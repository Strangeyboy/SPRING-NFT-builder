{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/GitHub/SPRING-NFT-builder/src/export.js\";\nimport React, { useCallback, useRef } from 'react';\nimport { Card } from \"./card\";\nimport { toPng } from 'html-to-image';\nexport function Export() {\n  var _this = this;\n\n  var App = function App() {\n    var ref = useRef < HTMLDivElement > null;\n    var onButtonClick = useCallback(function () {\n      if (ref.current === null) {\n        return;\n      }\n\n      toPng(ref.current, {\n        cacheBust: true\n      }).then(function (dataUrl) {\n        var link = document.createElement('a');\n        link.download = 'my-image-name.png';\n        link.href = dataUrl;\n        link.click();\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }, [ref]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onButtonClick,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"Click me\"));\n  };\n}","map":{"version":3,"sources":["/Users/james/Documents/GitHub/SPRING-NFT-builder/src/export.js"],"names":["React","useCallback","useRef","Card","toPng","Export","App","ref","HTMLDivElement","onButtonClick","current","cacheBust","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,KAAT,QAAsB,eAAtB;AAEA,OAAO,SAAUC,MAAV,GAAmB;AAAA;;AAE1B,MAAMC,GAAa,GAAG,SAAhBA,GAAgB,GAAM;AACxB,QAAMC,GAAG,GAAGL,MAAM,GAACM,cAAP,GAAuB,IAAnC;AAEA,QAAMC,aAAa,GAAGR,WAAW,CAAC,YAAM;AACtC,UAAIM,GAAG,CAACG,OAAJ,KAAgB,IAApB,EAA0B;AACxB;AACD;;AAEDN,MAAAA,KAAK,CAACG,GAAG,CAACG,OAAL,EAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd,CAAL,CACGC,IADH,CACQ,UAACC,OAAD,EAAa;AACjB,YAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;AACAF,QAAAA,IAAI,CAACG,QAAL,GAAgB,mBAAhB;AACAH,QAAAA,IAAI,CAACI,IAAL,GAAYL,OAAZ;AACAC,QAAAA,IAAI,CAACK,KAAL;AACD,OANH,EAOGC,KAPH,CAOS,UAACC,GAAD,EAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OATH;AAUD,KAfgC,EAe9B,CAACd,GAAD,CAf8B,CAAjC;AAiBA,wBACE,uDACE;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAIE;AAAQ,MAAA,OAAO,EAAEE,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CADF;AAQD,GA5BH;AA6BC","sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport { Card } from \"./card\";\nimport { toPng } from 'html-to-image';\n\nexport function  Export() {\n\nconst App: React.FC = () => {\n    const ref = useRef<HTMLDivElement>(null)\n  \n    const onButtonClick = useCallback(() => {\n      if (ref.current === null) {\n        return\n      }\n  \n      toPng(ref.current, { cacheBust: true, })\n        .then((dataUrl) => {\n          const link = document.createElement('a')\n          link.download = 'my-image-name.png'\n          link.href = dataUrl\n          link.click()\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }, [ref])\n  \n    return (\n      <>\n        <div ref={ref}>\n        {/* DOM nodes you want to convert to PNG */}\n        </div>\n        <button onClick={onButtonClick}>Click me</button>\n      </>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}