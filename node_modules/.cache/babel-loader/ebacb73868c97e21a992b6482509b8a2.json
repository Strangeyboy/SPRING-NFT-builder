{"ast":null,"code":"import _regeneratorRuntime from \"/Users/james/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/james/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/james/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/james/GitHub/SPRING-NFT-builder/src/upload.js\";\n\nimport React, { useState } from 'react';\nimport { Upload } from 'antd';\nimport ImgCrop from 'antd-img-crop';\n\nvar Demo = function Demo() {\n  var _useState = useState([{\n    uid: '-1',\n    name: 'image.png',\n    status: 'done',\n    url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      fileList = _useState2[0],\n      setFileList = _useState2[1];\n\n  var onChange = function onChange(_ref) {\n    var newFileList = _ref.fileList;\n    setFileList(newFileList);\n  };\n\n  var onPreview = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var src, image, imgWindow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              src = file.url;\n\n              if (src) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return new Promise(function (resolve) {\n                var reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n\n                reader.onload = function () {\n                  return resolve(reader.result);\n                };\n              });\n\n            case 4:\n              src = _context.sent;\n\n            case 5:\n              image = new Image();\n              image.src = src;\n              imgWindow = window.open(src);\n              imgWindow.document.write(image.outerHTML);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onPreview(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(ImgCrop, {\n    rotate: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Upload, {\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n    listType: \"picture-card\",\n    fileList: fileList,\n    onChange: onChange,\n    onPreview: onPreview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, fileList.length < 5 && '+ Upload'));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Demo, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 17\n  }\n}), mountNode);","map":{"version":3,"sources":["/Users/james/GitHub/SPRING-NFT-builder/src/upload.js"],"names":["React","useState","Upload","ImgCrop","Demo","uid","name","status","url","fileList","setFileList","onChange","newFileList","onPreview","file","src","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","length","ReactDOM","render","mountNode"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACeH,QAAQ,CAAC,CACvC;AACEI,IAAAA,GAAG,EAAE,IADP;AAEEC,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,MAAM,EAAE,MAHV;AAIEC,IAAAA,GAAG,EAAE;AAJP,GADuC,CAAD,CADvB;AAAA;AAAA,MACVC,QADU;AAAA,MACAC,WADA;;AAUjB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA+B;AAAA,QAAlBC,WAAkB,QAA5BH,QAA4B;AAC9CC,IAAAA,WAAW,CAACE,WAAD,CAAX;AACD,GAFD;;AAIA,MAAMC,SAAS;AAAA,yEAAG,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,cAAAA,GADY,GACND,IAAI,CAACN,GADC;;AAAA,kBAEXO,GAFW;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGF,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACjC,oBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,gBAAAA,MAAM,CAACE,aAAP,CAAqBN,IAAI,CAACO,aAA1B;;AACAH,gBAAAA,MAAM,CAACI,MAAP,GAAgB;AAAA,yBAAML,OAAO,CAACC,MAAM,CAACK,MAAR,CAAb;AAAA,iBAAhB;AACD,eAJW,CAHE;;AAAA;AAGdR,cAAAA,GAHc;;AAAA;AASVS,cAAAA,KATU,GASF,IAAIC,KAAJ,EATE;AAUhBD,cAAAA,KAAK,CAACT,GAAN,GAAYA,GAAZ;AACMW,cAAAA,SAXU,GAWEC,MAAM,CAACC,IAAP,CAAYb,GAAZ,CAXF;AAYhBW,cAAAA,SAAS,CAACG,QAAV,CAAmBC,KAAnB,CAAyBN,KAAK,CAACO,SAA/B;;AAZgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATlB,SAAS;AAAA;AAAA;AAAA,KAAf;;AAeA,sBACE,oBAAC,OAAD;AAAS,IAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAC,kDADT;AAEE,IAAA,QAAQ,EAAC,cAFX;AAGE,IAAA,QAAQ,EAAEJ,QAHZ;AAIE,IAAA,QAAQ,EAAEE,QAJZ;AAKE,IAAA,SAAS,EAAEE,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGJ,QAAQ,CAACuB,MAAT,GAAkB,CAAlB,IAAuB,UAP1B,CADF,CADF;AAaD,CA1CD;;AA4CAC,QAAQ,CAACC,MAAT,eAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,SAA1B","sourcesContent":["import React, { useState } from 'react';\nimport { Upload } from 'antd';\nimport ImgCrop from 'antd-img-crop';\n\nconst Demo = () => {\n  const [fileList, setFileList] = useState([\n    {\n      uid: '-1',\n      name: 'image.png',\n      status: 'done',\n      url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n    },\n  ]);\n\n  const onChange = ({ fileList: newFileList }) => {\n    setFileList(newFileList);\n  };\n\n  const onPreview = async file => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  return (\n    <ImgCrop rotate>\n      <Upload\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n      >\n        {fileList.length < 5 && '+ Upload'}\n      </Upload>\n    </ImgCrop>\n  );\n};\n\nReactDOM.render(<Demo />, mountNode);"]},"metadata":{},"sourceType":"module"}