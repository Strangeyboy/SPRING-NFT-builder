{"ast":null,"code":"import _regeneratorRuntime from \"/Users/james/Documents/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar WOFF = 'application/font-woff';\nvar JPEG = 'image/jpeg';\nvar mimes = {\n  woff: WOFF,\n  woff2: WOFF,\n  ttf: 'application/font-truetype',\n  eot: 'application/vnd.ms-fontobject',\n  png: 'image/png',\n  jpg: JPEG,\n  jpeg: JPEG,\n  gif: 'image/gif',\n  tiff: 'image/tiff',\n  svg: 'image/svg+xml'\n};\nexport function getExtension(url) {\n  var match = /\\.([^./]*?)$/g.exec(url);\n  return match ? match[1] : '';\n}\nexport function getMimeType(url) {\n  var extension = getExtension(url).toLowerCase();\n  return mimes[extension] || '';\n}\nexport function resolveUrl(url, baseUrl) {\n  // url is absolute already\n  if (url.match(/^[a-z]+:\\/\\//i)) {\n    return url;\n  } // url is absolute already, without protocol\n\n\n  if (url.match(/^\\/\\//)) {\n    return window.location.protocol + url;\n  } // dataURI, mailto:, tel:, etc.\n\n\n  if (url.match(/^[a-z]+:/i)) {\n    return url;\n  }\n\n  var doc = document.implementation.createHTMLDocument();\n  var base = doc.createElement('base');\n  var a = doc.createElement('a');\n  doc.head.appendChild(base);\n  doc.body.appendChild(a);\n\n  if (baseUrl) {\n    base.href = baseUrl;\n  }\n\n  a.href = url;\n  return a.href;\n}\nexport function isDataUrl(url) {\n  return url.search(/^(data:)/) !== -1;\n}\nexport function makeDataUrl(content, mimeType) {\n  return \"data:\".concat(mimeType, \";base64,\").concat(content);\n}\nexport function parseDataUrlContent(dataURL) {\n  return dataURL.split(/,/)[1];\n}\nexport var uuid = function uuid() {\n  // generate uuid for className of pseudo elements.\n  // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.\n  var counter = 0; // ref: http://stackoverflow.com/a/6248722/2519373\n\n  var random = function random() {\n    return (// eslint-disable-next-line no-bitwise\n      \"0000\".concat((Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4)\n    );\n  };\n\n  return function () {\n    counter += 1;\n    return \"u\".concat(random()).concat(counter);\n  };\n}();\nexport var delay = function delay(ms) {\n  return function (args) {\n    return new Promise(function (resolve) {\n      return setTimeout(function () {\n        return resolve(args);\n      }, ms);\n    });\n  };\n};\nexport function toArray(arrayLike) {\n  var arr = [];\n\n  for (var i = 0, l = arrayLike.length; i < l; i += 1) {\n    arr.push(arrayLike[i]);\n  }\n\n  return arr;\n}\n\nfunction px(node, styleProperty) {\n  var val = window.getComputedStyle(node).getPropertyValue(styleProperty);\n  return parseFloat(val.replace('px', ''));\n}\n\nexport function getNodeWidth(node) {\n  var leftBorder = px(node, 'border-left-width');\n  var rightBorder = px(node, 'border-right-width');\n  return node.clientWidth + leftBorder + rightBorder;\n}\nexport function getNodeHeight(node) {\n  var topBorder = px(node, 'border-top-width');\n  var bottomBorder = px(node, 'border-bottom-width');\n  return node.clientHeight + topBorder + bottomBorder;\n}\nexport function getPixelRatio() {\n  var ratio;\n  var FINAL_PROCESS;\n\n  try {\n    FINAL_PROCESS = process;\n  } catch (e) {// pass\n  }\n\n  var val = FINAL_PROCESS && FINAL_PROCESS.env ? FINAL_PROCESS.env.devicePixelRatio : null;\n\n  if (val) {\n    ratio = parseInt(val, 10);\n\n    if (Number.isNaN(ratio)) {\n      ratio = 1;\n    }\n  }\n\n  return ratio || window.devicePixelRatio || 1;\n}\nexport function canvasToBlob(canvas) {\n  if (canvas.toBlob) {\n    return new Promise(function (resolve) {\n      return canvas.toBlob(resolve);\n    });\n  }\n\n  return new Promise(function (resolve) {\n    var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n    var len = binaryString.length;\n    var binaryArray = new Uint8Array(len);\n\n    for (var i = 0; i < len; i += 1) {\n      binaryArray[i] = binaryString.charCodeAt(i);\n    }\n\n    resolve(new Blob([binaryArray], {\n      type: 'image/png'\n    }));\n  });\n}\nexport function createImage(url) {\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function () {\n      return resolve(img);\n    };\n\n    img.onerror = reject;\n    img.crossOrigin = 'anonymous';\n    img.decoding = 'sync';\n    img.src = url;\n  });\n}\nexport function svgToDataURL(svg) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", Promise.resolve().then(function () {\n              return new XMLSerializer().serializeToString(svg);\n            }).then(encodeURIComponent).then(function (html) {\n              return \"data:image/svg+xml;charset=utf-8,\".concat(html);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexport function nodeToDataURL(node, width, height) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var xmlns, svg, foreignObject;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            xmlns = 'http://www.w3.org/2000/svg';\n            svg = document.createElementNS(xmlns, 'svg');\n            foreignObject = document.createElementNS(xmlns, 'foreignObject');\n            svg.setAttribute('width', \"\".concat(width));\n            svg.setAttribute('height', \"\".concat(height));\n            svg.setAttribute('viewBox', \"0 0 \".concat(width, \" \").concat(height));\n            foreignObject.setAttribute('width', '100%');\n            foreignObject.setAttribute('height', '100%');\n            foreignObject.setAttribute('x', '0');\n            foreignObject.setAttribute('y', '0');\n            foreignObject.setAttribute('externalResourcesRequired', 'true');\n            svg.appendChild(foreignObject);\n            foreignObject.appendChild(node);\n            return _context2.abrupt(\"return\", svgToDataURL(svg));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}