{"ast":null,"code":"import _classCallCheck from \"/Users/james/Documents/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/james/Documents/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/james/Documents/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/james/Documents/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/james/Documents/GitHub/SPRING-NFT-builder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/james/Documents/GitHub/SPRING-NFT-builder/src/image.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nexport function ImgUpload() {\n  var ImageFile = /*#__PURE__*/function (_React$Component) {\n    _inherits(ImageFile, _React$Component);\n\n    var _super = _createSuper(ImageFile);\n\n    function ImageFile(props) {\n      var _this;\n\n      _classCallCheck(this, ImageFile);\n\n      _this = _super.call(this, props);\n      _this.state = {\n        id: \"someUniqueId\",\n        // I would use this.props.id for a real world implementation\n        imageURI: null\n      };\n      return _this;\n    }\n\n    _createClass(ImageFile, [{\n      key: \"buildImgTag\",\n      value: function buildImgTag() {\n        var imgTag = null;\n        if (this.state.imageURI !== null) imgTag = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"small-9 small-centered columns\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          className: \"thumbnail\",\n          src: this.state.imageURI,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 23\n          }\n        })));\n        return imgTag;\n      }\n    }, {\n      key: \"readURI\",\n      value: function readURI(e) {\n        if (e.target.files && e.target.files[0]) {\n          var reader = new FileReader();\n\n          reader.onload = function (ev) {\n            this.setState({\n              imageURI: ev.target.result\n            });\n          }.bind(this);\n\n          reader.readAsDataURL(e.target.files[0]);\n        }\n      }\n    }, {\n      key: \"handleChange\",\n      value: function handleChange(e) {\n        this.readURI(e); // maybe call this with webworker or async library?\n\n        if (this.props.onChange !== undefined) this.props.onChange(e); // propagate to parent component\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var imgTag = this.buildImgTag();\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 14\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: this.state.id,\n          className: \"button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }\n        }, \"Upload an image\"), /*#__PURE__*/React.createElement(\"input\", {\n          id: this.state.id,\n          type: \"file\",\n          onChange: this.handleChange.bind(this),\n          className: \"show-for-sr\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }\n        }), imgTag);\n      }\n    }]);\n\n    return ImageFile;\n  }(React.Component);\n\n  ReactDOM.render( /*#__PURE__*/React.createElement(ImageFile, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/james/Documents/GitHub/SPRING-NFT-builder/src/image.js"],"names":["React","ReactDOM","ImgUpload","ImageFile","props","state","id","imageURI","imgTag","e","target","files","reader","FileReader","onload","ev","setState","result","bind","readAsDataURL","readURI","onChange","undefined","buildImgTag","handleChange","Component","render"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,SAAUC,SAAV,GAAsB;AAAA,MACvBC,SADuB;AAAA;;AAAA;;AAEzB,uBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,gCAAMA,KAAN;AACA,YAAKC,KAAL,GAAa;AACXC,QAAAA,EAAE,EAAG,cADM;AACU;AACrBC,QAAAA,QAAQ,EAAG;AAFA,OAAb;AAFgB;AAMjB;;AARwB;AAAA;AAAA,aAUzB,uBAAa;AACX,YAAIC,MAAM,GAAG,IAAb;AACA,YAAI,KAAKH,KAAL,CAAWE,QAAX,KAAwB,IAA5B,EACEC,MAAM,gBAAI;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAA2B,UAAA,GAAG,EAAE,KAAKH,KAAL,CAAWE,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CAAV;AAKF,eAAOC,MAAP;AACD;AAnBwB;AAAA;AAAA,aAqBzB,iBAAQC,CAAR,EAAU;AACR,YAAGA,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB,EAAuC;AACrC,cAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,UAAAA,MAAM,CAACE,MAAP,GAAgB,UAASC,EAAT,EAAY;AAC1B,iBAAKC,QAAL,CAAc;AAACT,cAAAA,QAAQ,EAACQ,EAAE,CAACL,MAAH,CAAUO;AAApB,aAAd;AACD,WAFe,CAEdC,IAFc,CAET,IAFS,CAAhB;;AAGAN,UAAAA,MAAM,CAACO,aAAP,CAAqBV,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB;AACD;AACF;AA7BwB;AAAA;AAAA,aA+BzB,sBAAaF,CAAb,EAAe;AACb,aAAKW,OAAL,CAAaX,CAAb,EADa,CACI;;AACjB,YAAI,KAAKL,KAAL,CAAWiB,QAAX,KAAwBC,SAA5B,EACE,KAAKlB,KAAL,CAAWiB,QAAX,CAAoBZ,CAApB,EAHW,CAGa;AAC3B;AAnCwB;AAAA;AAAA,aAqCzB,kBAAS;AACP,YAAMD,MAAM,GAAG,KAAKe,WAAL,EAAf;AAEA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACC;AACE,UAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWC,EADtB;AAEE,UAAA,SAAS,EAAC,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADD,eAMC;AACE,UAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,EADjB;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,QAAQ,EAAE,KAAKkB,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAHZ;AAIE,UAAA,SAAS,EAAC,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAND,EAWEV,MAXF,CAAP;AAaD;AArDwB;;AAAA;AAAA,IACLR,KAAK,CAACyB,SADD;;AAuD3BxB,EAAAA,QAAQ,CAACyB,MAAT,eAAgB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB;AACD","sourcesContent":["\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\n\nexport function  ImgUpload() {\nclass ImageFile extends React.Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        id : \"someUniqueId\", // I would use this.props.id for a real world implementation\n        imageURI : null\n      }\n    }\n    \n    buildImgTag(){\n      let imgTag = null;\n      if (this.state.imageURI !== null)\n        imgTag = (<div className=\"row\">\n                    <div className=\"small-9 small-centered columns\">\n                      <img className=\"thumbnail\" src={this.state.imageURI}></img>\n                    </div>\n                  </div>);\n      return imgTag;\n    }\n    \n    readURI(e){\n      if(e.target.files && e.target.files[0]){\n        let reader = new FileReader();\n        reader.onload = function(ev){\n          this.setState({imageURI:ev.target.result});\n        }.bind(this);\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    }\n    \n    handleChange(e){\n      this.readURI(e); // maybe call this with webworker or async library?\n      if (this.props.onChange !== undefined)\n        this.props.onChange(e); // propagate to parent component\n    }\n  \n    render() {\n      const imgTag = this.buildImgTag();\n  \n      return <div>\n              <label\n                htmlFor={this.state.id}\n                className=\"button\">\n                Upload an image\n              </label>\n              <input\n                id={this.state.id}\n                type=\"file\"\n                onChange={this.handleChange.bind(this)}\n                className=\"show-for-sr\" />\n              {imgTag}\n            </div>;\n    }\n  }\n  ReactDOM.render(<ImageFile />);\n}"]},"metadata":{},"sourceType":"module"}